# -*- coding: utf-8 -*-
"""ProjectAssignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IPU_zV_DXAofxUZp1BIXQgoNOiUg8QA-
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import KFold,GridSearchCV
from google.colab import drive
drive.mount('/content/drive')

"""#Data Preparation and feature extraction


"""

fifa = pd.read_csv('/content/drive/My Drive/Colab Notebooks/players_21.csv')

fifa22 = pd.read_csv('/content/drive/My Drive/Colab Notebooks/players_22.csv')

fifa.head()

#Getting information on each column to see which ones to drop based on the number
#of items under each column
fifa.info()

#List all the columns in the dataset
column_names = fifa.columns.tolist()
column_names

#Removing the unecessary columns
columns_to_drop=['long_name','player_url','dob','club_team_id',
                 'club_team_id','club_contract_valid_until',
                 'nationality_id','nation_position','release_clause_eur','player_tags',
                 'player_traits','player_face_url','club_logo_url',
                 'club_flag_url','nation_logo_url','nation_flag_url','nation_jersey_number',
                 'club_loaned_from','nation_team_id','goalkeeping_speed']

fifa.drop(columns=columns_to_drop, axis=1, inplace=True)

fifa.info()

corr_matrix = fifa.corr()

corr_matrix

#checking for the correlation between the rating and the other variables
corr_matrix['overall']

#Columns to drop after looking at the correlations with the overall rating
drop_columns = ['sofifa_id','height_cm','weak_foot', 'skill_moves','pace','attacking_finishing',
                'attacking_heading_accuracy','attacking_volleys','skill_dribbling',
                'skill_fk_accuracy','movement_acceleration','movement_sprint_speed',
                'movement_agility','movement_balance','power_jumping','power_stamina',
                'power_strength','mentality_interceptions','mentality_positioning',
                'mentality_penalties','defending_marking_awareness','defending_standing_tackle',
                'defending_sliding_tackle','goalkeeping_diving','goalkeeping_handling',
                'goalkeeping_positioning','goalkeeping_reflexes','sofifa_id','league_level',
                'club_jersey_number','goalkeeping_kicking','club_name','league_name','club_joined','short_name',
                'ls','st','rs','lw','lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm','rcm','rm','lwb','ldm',
                'cdm','rdm','rwb','lb','lcb','cb','rcb','rb','player_positions','club_position','nationality_name','preferred_foot',
                'work_rate','body_type','real_face','gk','power_long_shots','mentality_aggression',
                'skill_ball_control','skill_long_passing','skill_curve','attacking_crossing','player_positions','club_position','nationality_name','preferred_foot',
                 'work_rate','body_type','real_face','gk','power_long_shots','mentality_aggression',
                 'skill_ball_control','skill_long_passing','skill_curve','attacking_crossing']

fifa.drop(columns=drop_columns, axis=1, inplace=True)

fifa.info()

#Identify the columns with missing values
columns_with_missing_values = fifa.columns[fifa.isnull().any()]

columns_with_missing_values

#impute the missing values
for column in columns_with_missing_values:
  if fifa[column].dtype == 'object':
    fifa[column].fillna(fifa[column].mode()[0], inplace=True)
  else:
    fifa[column].fillna(fifa[column].mean(),inplace=True)

fifa.info()

#X contains the independent varaibles and y is the dependent variable
dependent_variable = 'overall'
X = fifa.drop(dependent_variable,axis=1)
y = fifa[dependent_variable]

fifa.head()

#verify that the dataframe is updated
fifa.info()

"""#Feature Engineering

"""

#Scale the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#Convert scaled features back to a dataframe
new_fifa = pd.DataFrame(X_scaled,columns=X.columns)

new_fifa

new_fifa.info()

"""#Training Models"""

#Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

X_train

"""#GridSearch"""

# Step 3: Create a Parameter Grid
cv=KFold(n_splits=5)
rf_parameters = {
   'n_estimators': [200, 300, 400],
   'min_samples_split': [2, 5, 10],
    'max_depth': [None, 10, 20, 30]
}

xgb_parameters = {
   'n_estimators': [200, 300, 400],
   'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [None, 10, 20, 30]
}

gb_parameters = {
   'n_estimators': [200, 300, 400],
   'learning_rate': [0.01, 0.1, 0.2],
   'max_depth': [None, 10, 20, 30]
}

rf_regressor = RandomForestRegressor()
xgb_model =  xgb.XGBRegressor()
gradient_boost = GradientBoostingRegressor()

rf_grid_search = GridSearchCV(estimator=rf_regressor, param_grid=rf_parameters, scoring='neg_mean_squared_error', cv=5)
rf_grid_search.fit(X_train, y_train)

xgb_grid_search = GridSearchCV(estimator=xgb_model, param_grid=xgb_parameters, scoring='neg_mean_squared_error', cv=5)
xgb_grid_search.fit(X_train, y_train)

gb_grid_search = GridSearchCV(estimator=gradient_boost, param_grid=gb_parameters, scoring='neg_mean_squared_error', cv=5)
gb_grid_search.fit(X_train, y_train)

#Best parameters from the hypertuning process for RandomForestRegressor
rf_best_params = rf_grid_search.best_params_
rf_best_params

#Best parameters from the hypertuning process for XGBoostingRegressor
xgb_best_params = xgb_grid_search.best_params_
xgb_best_params

#Best parameters from the hypertuning process for GradientBoostingRegressor
gb_best_params = gb_grid_search.best_params_
gb_best_params

"""#Cross Validation"""

#Cross validation for all models using k-fold
rf_cv_scores = cross_val_score(rf_regressor,X_train,y_train,cv=cv,scoring='neg_mean_squared_error')
rf_rmse= np.sqrt(-rf_cv_scores.mean())
print(rf_rmse)

xgb_cv_scores = cross_val_score(xgb_model,X_train,y_train,cv=cv,scoring='neg_mean_squared_error')
xgb_rmse= np.sqrt(-xgb_cv_scores.mean())
print(xgb_rmse)

gb_cv_scores = cross_val_score(gradient_boost,X_train,y_train,cv=cv,scoring='neg_mean_squared_error')
gb_rmse= np.sqrt(-gb_cv_scores.mean())
print(gb_rmse)

#Retraining models with best hyperarameters
rf_regressor.fit(X_train,y_train)

xgb_model.fit(X_train,y_train)

gradient_boost.fit(X_train,y_train)

final_rf_pred=np.round(rf_regressor.predict(X_test))

final_xgb_pred=np.round(xgb_model.predict(X_test))

final_gb_pred=np.round(gradient_boost.predict(X_test))

from sklearn.metrics import r2_score

rf_mae=mean_absolute_error(y_test,final_rf_pred)
rf_rmse=np.sqrt(mean_squared_error(y_test,final_rf_pred))
rf_r2=r2_score(y_test,final_rf_pred)
print(rf_mae)
print(rf_rmse)
print(rf_r2)

xgb_mae=mean_absolute_error(y_test,final_xgb_pred)
xgb_rmse=np.sqrt(mean_squared_error(y_test,final_xgb_pred))
xgb_r2=r2_score(y_test,final_xgb_pred)
print(xgb_mae)
print(xgb_rmse)
print(xgb_r2)

gb_mae=mean_absolute_error(y_test,final_gb_pred)
gb_rmse=np.sqrt(mean_squared_error(y_test,final_gb_pred))
gb_r2=r2_score(y_test,final_gb_pred)
print(gb_mae)
print(gb_rmse)
print(gb_r2)

import pickle

best_model = xgb_model
with open('best_model.pkl', 'wb') as file:
  pickle.dump(best_model, file)

with open('scaler.pkl', 'wb') as file:
  pickle.dump(scaler, file)

"""

```
# This is formatted as code
```

#Testing the fifa_22 model with"""

#List all the columns in the dataset
column_names = fifa22.columns.tolist()
column_names

#Removing the unecessary columns
columns_to_drop22=['long_name','club_team_id','player_url','dob','club_team_id',
                 'club_team_id','club_contract_valid_until',
                 'nationality_id','nation_position','release_clause_eur','player_tags',
                 'player_traits','player_face_url','club_logo_url',
                 'club_flag_url','nation_logo_url','nation_flag_url','nation_jersey_number',
                 'club_loaned_from','nation_team_id','goalkeeping_speed']

fifa22.drop(columns=columns_to_drop22, axis=1, inplace=True)

#Columns to drop after looking at the correlations with the overall rating
drop_columns22 = ['sofifa_id','height_cm','weak_foot', 'skill_moves','pace','attacking_finishing',
                'attacking_heading_accuracy','attacking_volleys','skill_dribbling',
                'skill_fk_accuracy','movement_acceleration','movement_sprint_speed',
                'movement_agility','movement_balance','power_jumping','power_stamina',
                'power_strength','mentality_interceptions','mentality_positioning',
                'mentality_penalties','defending_marking_awareness','defending_standing_tackle',
                'defending_sliding_tackle','goalkeeping_diving','goalkeeping_handling',
                'goalkeeping_positioning','goalkeeping_reflexes','sofifa_id','league_level',
                'club_jersey_number','goalkeeping_kicking','club_name','league_name','club_joined','short_name']

fifa22.drop(columns=drop_columns22, axis=1, inplace=True)

#Identify the columns with missing values
columns_with_missing_values22 = fifa22.columns[fifa22.isnull().any()]

columns_with_missing_values22

#impute the missing values
for column in columns_with_missing_values22:
  if fifa22[column].dtype == 'object':
    fifa22[column].fillna(fifa22[column].mode()[0], inplace=True)
  else:
    fifa22[column].fillna(fifa22[column].mean(),inplace=True)

#Identify the categorical variables
categorical22 = [col for col in fifa22.columns if fifa22[col].dtype == 'object']

#Encode categorical variables
label_encoder22 = LabelEncoder()
for col in categorical22:
  fifa22[col] = label_encoder22.fit_transform(fifa22[col])

#verify that the dataframe is updated
fifa22.info()

#X contains the independent varaibles and y is the dependent variable
dependent_variable = 'overall'
X22 = fifa22.drop(dependent_variable,axis=1)
y22 = fifa22[dependent_variable]

#Scale the data
scaler22 = StandardScaler()
scaled_features22 = scaler22.fit_transform(X22)

#Convert scaled features back to a dataframe
new_fifa22 = pd.DataFrame(scaled_features22, columns=X22.columns)

new_fifa22.insert(0, 'overall', y22)

new_fifa22

column_dropping22 = ['player_positions','club_position','nationality_name','preferred_foot',
                   'work_rate','body_type','real_face','gk','power_long_shots','mentality_aggression',
                   'skill_ball_control','skill_long_passing','skill_curve','attacking_crossing','ls','st',
                   'rs','lw','lf','cf','rf','rw','lam','cam','ram','lm','lcm','cm','rcm','rm','lwb','ldm',
                   'cdm','rdm','rwb','lb','lcb','cb','rcb','rb']

new_fifa22.drop(columns=column_dropping22, axis=1, inplace=True)

new_fifa22.info()

X_2022 = new_fifa22.drop(columns=['overall'], axis = 1)
Y_2022 = new_fifa22['overall']

best_model = xgb_model

y_pred_2022 = best_model.predict(X_2022)
rmse_2022 = np.sqrt(mean_squared_error(y_pred_2022,Y_2022))
mae_2022 = mean_absolute_error(y_pred_2022,Y_2022)

print('RMSE for best model on 2022 data', rmse_2022)
print('MAE for best model on 2022 data',mae_2022)

results = pd.DataFrame({'Predicted': np.round(y_pred_2022), 'Actual': Y_2022})

results